#include <WiFi.h>
#include <WebServer.h>

const char* ssid = "Bomb diffuser";
const char* password = "12345678";

WebServer server(80);

// Define the motor control pins
const int IN1 = 13;  // GPIO 13
const int IN2 = 12;  // GPIO 12
const int IN3 = 14;  // GPIO 14
const int IN4 = 15;  // GPIO 15

const char html[] PROGMEM = R"rawliteral(
<!DOCTYPE html>
<html>
<head>
  <title>ABC AIR Panel</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
  <style>
    body {
      background-color: #000;
      color: #00F;
      font-family: Arial, sans-serif;
      text-align: center;
      margin: 0;
      height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
      overflow: hidden;
    }
    #controls {
      display: grid;
      grid-template-areas:
        ". up ."
        "left . right"
        ". down .";
      grid-gap: 10px;
    }
    button {
      width: 100px;
      height: 100px;
      font-size: 24px;
      color: #00F;
      background-color: #444;
      border: none;
      border-radius: 10px;
      cursor: pointer;
    }
    button:active {
      background-color: #666;
    }
    .up { grid-area: up; }
    .left { grid-area: left; }
    .right { grid-area: right; }
    .down { grid-area: down; }
    * {
      user-select: none;
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
    }
  </style>
</head>
<body>
  <div id="controls">
    <button class="up" id="btn1" ontouchstart="sendCommand(1)" ontouchend="sendCommand(0)">Up</button>
    <button class="left" id="btn2" ontouchstart="sendCommand(2)" ontouchend="sendCommand(0)">Left</button>
    <button class="right" id="btn3" ontouchstart="sendCommand(3)" ontouchend="sendCommand(0)">Right</button>
    <button class="down" id="btn4" ontouchstart="sendCommand(4)" ontouchend="sendCommand(0)">Down</button>
  </div>
  <script>
    function sendCommand(cmd) {
      var xhr = new XMLHttpRequest();
      xhr.open("GET", "/command?move=" + cmd, true);
      xhr.send();
    }
  </script>
</body>
</html>
)rawliteral";

void handleRoot() {
  server.send_P(200, "text/html", html);
}

void handleCommand() {
  if (server.hasArg("move")) {
    String move = server.arg("move");
    Serial.println("Move: " + move);
    controlCar(move.toInt());
  }
  server.send(204); // No content to return
}

void controlCar(int command) {
  // Set all control pins to LOW before setting specific commands
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, LOW);

  switch (command) {
    case 1: // Move up
      digitalWrite(IN1, HIGH);
      digitalWrite(IN2, LOW);
      digitalWrite(IN3, HIGH);
      digitalWrite(IN4, LOW);
      break;
    case 2: // Move left
      digitalWrite(IN1, LOW);
      digitalWrite(IN2, HIGH);
      digitalWrite(IN3, HIGH);
      digitalWrite(IN4, LOW);
      break;
    case 3: // Move right
      digitalWrite(IN1, HIGH);
      digitalWrite(IN2, LOW);
      digitalWrite(IN3, LOW);
      digitalWrite(IN4, HIGH);
      break;
    case 4: // Move down
      digitalWrite(IN1, LOW);
      digitalWrite(IN2, HIGH);
      digitalWrite(IN3, LOW);
      digitalWrite(IN4, HIGH);
      break;
    default: // Stop
      // All pins are already set to LOW
      break;
  }
}

void setup() {
  Serial.begin(115200);

  // Connect to Wi-Fi
  WiFi.softAP(ssid, password);

  // Set up motor control pins
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);

  // Initialize motor state
  controlCar(0);

  // Define web server routes
  server.on("/", handleRoot);
  server.on("/command", handleCommand);
  
  // Start the server
  server.begin();
  Serial.println("HTTP server started");
}

void loop() {
  server.handleClient();
}
